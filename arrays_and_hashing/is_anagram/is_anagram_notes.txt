Assumptions:
1. Two strings of the same length
2. No malicious input

s and t
I shouldn't need any extra memory since I should be able to compare the strings, character by character, against each other.

Start at the left of s and the right of t and work in opposite directions.
S goes left to right
T goes right to left
Compare each character
If they aren't the same, return false
If you get to the end and haven't returned false, return true.

How the hell do you do string comparison like that in JS?
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at lets me use negative integers. 
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length

Ok, so I misread the concept of anagram. I thought it was reversed, not "different". Back to the drawing board.

# An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Brute Force is what? iterate through each string, count each letter, and then compare the counts?

What is the computation on that? N^2?


Ok, so I could sort both strings and then compare them. The sort will cost me nlogn and then I can compare the letters side by side. If they don't match, then they don't have the same letters.

I could iterate over each square